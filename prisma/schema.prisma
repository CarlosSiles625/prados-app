generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String      @id @default(cuid())
  created_at DateTime    @default(now()) @db.Timestamp(6)
  email      String?     @unique
  cedula     Int         @unique
  name       String
  password   String
  roleId     Int
  role       Role        @relation(fields: [roleId], references: [id], onDelete: Cascade)
  Intern     Intern[]
  Historial  Historial[]
}

model Role {
  id           Int      @id @default(autoincrement())
  created_at   DateTime @default(now()) @db.Timestamp(6)
  name         String   @unique
  display_name String   @default("Usuario General")
  users        User[]
}

model Intern {
  id               String      @id @default(cuid())
  created_at       DateTime    @default(now()) @db.Timestamp(6)
  name             String
  birthdate        DateTime
  born_place       Json
  isRural          Boolean
  cedula           BigInt      @unique
  phone            String?
  references       Json[]
  marital_status   String?
  direction        Json?
  adiccions        Json[]
  education        Json?
  profession       String?
  ocupation        String?
  talents          String[]
  guarantor_name   String?
  image            String?
  gender           String?     @default("M")
  user_id          String
  user             User        @relation(fields: [user_id], references: [id], onDelete: Cascade)
  interned_at      DateTime    @db.Timestamp(6)
  out_at           DateTime?   @db.Timestamp(6)
  status           String      @default("Activo")
  finished_program Boolean?    @default(false)
  out_properties   Json?
  Historial        Historial[]
}

model Historial {
  id         Int      @id @default(autoincrement())
  created_at DateTime @default(now()) @db.Timestamp(6)
  intern_id  String
  intern     Intern   @relation(fields: [intern_id], references: [id], onDelete: Cascade)
  notes      String
  user_id    String
  user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
}
